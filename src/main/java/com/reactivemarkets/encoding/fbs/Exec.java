// automatically generated by the FlatBuffers compiler, do not modify

package com.reactivemarkets.encoding.fbs;

import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class Exec extends Table {
    public static Exec getRootAsExec(ByteBuffer _bb) {
        return getRootAsExec(_bb, new Exec());
    }

    public static Exec getRootAsExec(ByteBuffer _bb, Exec obj) {
        _bb.order(ByteOrder.LITTLE_ENDIAN);
        return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb));
    }

    public static int createExec(FlatBufferBuilder builder,
                                 long created_ts,
                                 long trans_ts,
                                 int userOffset,
                                 int accntOffset,
                                 int marketOffset,
                                 int exec_idOffset,
                                 int order_idOffset,
                                 int cl_order_idOffset,
                                 int strat_typeOffset,
                                 short side,
                                 short order_type,
                                 short time_type,
                                 short exec_type,
                                 double qty,
                                 double price,
                                 double min_qty,
                                 double resd_qty,
                                 double cum_qty,
                                 double cum_cost,
                                 double last_qty,
                                 double last_price,
                                 double prev_qty,
                                 int settl_date,
                                 int match_idOffset,
                                 short liq_ind,
                                 int exec_venueOffset,
                                 int cptyOffset) {
        builder.startObject(27);
        Exec.addPrevQty(builder, prev_qty);
        Exec.addLastPrice(builder, last_price);
        Exec.addLastQty(builder, last_qty);
        Exec.addCumCost(builder, cum_cost);
        Exec.addCumQty(builder, cum_qty);
        Exec.addResdQty(builder, resd_qty);
        Exec.addMinQty(builder, min_qty);
        Exec.addPrice(builder, price);
        Exec.addQty(builder, qty);
        Exec.addTransTs(builder, trans_ts);
        Exec.addCreatedTs(builder, created_ts);
        Exec.addCpty(builder, cptyOffset);
        Exec.addExecVenue(builder, exec_venueOffset);
        Exec.addMatchId(builder, match_idOffset);
        Exec.addSettlDate(builder, settl_date);
        Exec.addStratType(builder, strat_typeOffset);
        Exec.addClOrderId(builder, cl_order_idOffset);
        Exec.addOrderId(builder, order_idOffset);
        Exec.addExecId(builder, exec_idOffset);
        Exec.addMarket(builder, marketOffset);
        Exec.addAccnt(builder, accntOffset);
        Exec.addUser(builder, userOffset);
        Exec.addLiqInd(builder, liq_ind);
        Exec.addExecType(builder, exec_type);
        Exec.addTimeType(builder, time_type);
        Exec.addOrderType(builder, order_type);
        Exec.addSide(builder, side);
        return Exec.endExec(builder);
    }

    public static void startExec(FlatBufferBuilder builder) {
        builder.startObject(27);
    }

    public static void addCreatedTs(FlatBufferBuilder builder, long createdTs) {
        builder.addLong(0, createdTs, 0L);
    }

    public static void addTransTs(FlatBufferBuilder builder, long transTs) {
        builder.addLong(1, transTs, 0L);
    }

    public static void addUser(FlatBufferBuilder builder, int userOffset) {
        builder.addOffset(2, userOffset, 0);
    }

    public static void addAccnt(FlatBufferBuilder builder, int accntOffset) {
        builder.addOffset(3, accntOffset, 0);
    }

    public static void addMarket(FlatBufferBuilder builder, int marketOffset) {
        builder.addOffset(4, marketOffset, 0);
    }

    public static void addExecId(FlatBufferBuilder builder, int execIdOffset) {
        builder.addOffset(5, execIdOffset, 0);
    }

    public static void addOrderId(FlatBufferBuilder builder, int orderIdOffset) {
        builder.addOffset(6, orderIdOffset, 0);
    }

    public static void addClOrderId(FlatBufferBuilder builder, int clOrderIdOffset) {
        builder.addOffset(7, clOrderIdOffset, 0);
    }

    public static void addStratType(FlatBufferBuilder builder, int stratTypeOffset) {
        builder.addOffset(8, stratTypeOffset, 0);
    }

    public static void addSide(FlatBufferBuilder builder, short side) {
        builder.addShort(9, side, 0);
    }

    public static void addOrderType(FlatBufferBuilder builder, short orderType) {
        builder.addShort(10, orderType, 1);
    }

    public static void addTimeType(FlatBufferBuilder builder, short timeType) {
        builder.addShort(11, timeType, 0);
    }

    public static void addExecType(FlatBufferBuilder builder, short execType) {
        builder.addShort(12, execType, 0);
    }

    public static void addQty(FlatBufferBuilder builder, double qty) {
        builder.addDouble(13, qty, 0.0);
    }

    public static void addPrice(FlatBufferBuilder builder, double price) {
        builder.addDouble(14, price, 0.0);
    }

    public static void addMinQty(FlatBufferBuilder builder, double minQty) {
        builder.addDouble(15, minQty, 1.0);
    }

    public static void addResdQty(FlatBufferBuilder builder, double resdQty) {
        builder.addDouble(16, resdQty, 0.0);
    }

    public static void addCumQty(FlatBufferBuilder builder, double cumQty) {
        builder.addDouble(17, cumQty, 0.0);
    }

    public static void addCumCost(FlatBufferBuilder builder, double cumCost) {
        builder.addDouble(18, cumCost, 0.0);
    }

    public static void addLastQty(FlatBufferBuilder builder, double lastQty) {
        builder.addDouble(19, lastQty, 0.0);
    }

    public static void addLastPrice(FlatBufferBuilder builder, double lastPrice) {
        builder.addDouble(20, lastPrice, 0.0);
    }

    public static void addPrevQty(FlatBufferBuilder builder, double prevQty) {
        builder.addDouble(21, prevQty, 0.0);
    }

    public static void addSettlDate(FlatBufferBuilder builder, int settlDate) {
        builder.addInt(22, settlDate, 0);
    }

    public static void addMatchId(FlatBufferBuilder builder, int matchIdOffset) {
        builder.addOffset(23, matchIdOffset, 0);
    }

    public static void addLiqInd(FlatBufferBuilder builder, short liqInd) {
        builder.addShort(24, liqInd, 0);
    }

    public static void addExecVenue(FlatBufferBuilder builder, int execVenueOffset) {
        builder.addOffset(25, execVenueOffset, 0);
    }

    public static void addCpty(FlatBufferBuilder builder, int cptyOffset) {
        builder.addOffset(26, cptyOffset, 0);
    }

    public static int endExec(FlatBufferBuilder builder) {
        int o = builder.endObject();
        builder.required(o, 10);  // accnt
        builder.required(o, 12);  // market
        builder.required(o, 14);  // exec_id
        return o;
    }

    public void __init(int _i, ByteBuffer _bb) {
        bb_pos = _i;
        bb = _bb;
        vtable_start = bb_pos - bb.getInt(bb_pos);
        vtable_size = bb.getShort(vtable_start);
    }

    public Exec __assign(int _i, ByteBuffer _bb) {
        __init(_i, _bb);
        return this;
    }

    public long createdTs() {
        int o = __offset(4);
        return o != 0 ? bb.getLong(o + bb_pos) : 0L;
    }

    public long transTs() {
        int o = __offset(6);
        return o != 0 ? bb.getLong(o + bb_pos) : 0L;
    }

    public String user() {
        int o = __offset(8);
        return o != 0 ? __string(o + bb_pos) : null;
    }

    public ByteBuffer userAsByteBuffer() {
        return __vector_as_bytebuffer(8, 1);
    }

    public ByteBuffer userInByteBuffer(ByteBuffer _bb) {
        return __vector_in_bytebuffer(_bb, 8, 1);
    }

    public String accnt() {
        int o = __offset(10);
        return o != 0 ? __string(o + bb_pos) : null;
    }

    public ByteBuffer accntAsByteBuffer() {
        return __vector_as_bytebuffer(10, 1);
    }

    public ByteBuffer accntInByteBuffer(ByteBuffer _bb) {
        return __vector_in_bytebuffer(_bb, 10, 1);
    }

    public String market() {
        int o = __offset(12);
        return o != 0 ? __string(o + bb_pos) : null;
    }

    public ByteBuffer marketAsByteBuffer() {
        return __vector_as_bytebuffer(12, 1);
    }

    public ByteBuffer marketInByteBuffer(ByteBuffer _bb) {
        return __vector_in_bytebuffer(_bb, 12, 1);
    }

    public String execId() {
        int o = __offset(14);
        return o != 0 ? __string(o + bb_pos) : null;
    }

    public ByteBuffer execIdAsByteBuffer() {
        return __vector_as_bytebuffer(14, 1);
    }

    public ByteBuffer execIdInByteBuffer(ByteBuffer _bb) {
        return __vector_in_bytebuffer(_bb, 14, 1);
    }

    public String orderId() {
        int o = __offset(16);
        return o != 0 ? __string(o + bb_pos) : null;
    }

    public ByteBuffer orderIdAsByteBuffer() {
        return __vector_as_bytebuffer(16, 1);
    }

    public ByteBuffer orderIdInByteBuffer(ByteBuffer _bb) {
        return __vector_in_bytebuffer(_bb, 16, 1);
    }

    public String clOrderId() {
        int o = __offset(18);
        return o != 0 ? __string(o + bb_pos) : null;
    }

    public ByteBuffer clOrderIdAsByteBuffer() {
        return __vector_as_bytebuffer(18, 1);
    }

    public ByteBuffer clOrderIdInByteBuffer(ByteBuffer _bb) {
        return __vector_in_bytebuffer(_bb, 18, 1);
    }

    public String stratType() {
        int o = __offset(20);
        return o != 0 ? __string(o + bb_pos) : null;
    }

    public ByteBuffer stratTypeAsByteBuffer() {
        return __vector_as_bytebuffer(20, 1);
    }

    public ByteBuffer stratTypeInByteBuffer(ByteBuffer _bb) {
        return __vector_in_bytebuffer(_bb, 20, 1);
    }

    public short side() {
        int o = __offset(22);
        return o != 0 ? bb.getShort(o + bb_pos) : 0;
    }

    public short orderType() {
        int o = __offset(24);
        return o != 0 ? bb.getShort(o + bb_pos) : 1;
    }

    public short timeType() {
        int o = __offset(26);
        return o != 0 ? bb.getShort(o + bb_pos) : 0;
    }

    public short execType() {
        int o = __offset(28);
        return o != 0 ? bb.getShort(o + bb_pos) : 0;
    }

    public double qty() {
        int o = __offset(30);
        return o != 0 ? bb.getDouble(o + bb_pos) : 0.0;
    }

    public double price() {
        int o = __offset(32);
        return o != 0 ? bb.getDouble(o + bb_pos) : 0.0;
    }

    public double minQty() {
        int o = __offset(34);
        return o != 0 ? bb.getDouble(o + bb_pos) : 1.0;
    }

    public double resdQty() {
        int o = __offset(36);
        return o != 0 ? bb.getDouble(o + bb_pos) : 0.0;
    }

    public double cumQty() {
        int o = __offset(38);
        return o != 0 ? bb.getDouble(o + bb_pos) : 0.0;
    }

    public double cumCost() {
        int o = __offset(40);
        return o != 0 ? bb.getDouble(o + bb_pos) : 0.0;
    }

    public double lastQty() {
        int o = __offset(42);
        return o != 0 ? bb.getDouble(o + bb_pos) : 0.0;
    }

    public double lastPrice() {
        int o = __offset(44);
        return o != 0 ? bb.getDouble(o + bb_pos) : 0.0;
    }

    public double prevQty() {
        int o = __offset(46);
        return o != 0 ? bb.getDouble(o + bb_pos) : 0.0;
    }

    public int settlDate() {
        int o = __offset(48);
        return o != 0 ? bb.getInt(o + bb_pos) : 0;
    }

    public String matchId() {
        int o = __offset(50);
        return o != 0 ? __string(o + bb_pos) : null;
    }

    public ByteBuffer matchIdAsByteBuffer() {
        return __vector_as_bytebuffer(50, 1);
    }

    public ByteBuffer matchIdInByteBuffer(ByteBuffer _bb) {
        return __vector_in_bytebuffer(_bb, 50, 1);
    }

    public short liqInd() {
        int o = __offset(52);
        return o != 0 ? bb.getShort(o + bb_pos) : 0;
    }

    public String execVenue() {
        int o = __offset(54);
        return o != 0 ? __string(o + bb_pos) : null;
    }

    public ByteBuffer execVenueAsByteBuffer() {
        return __vector_as_bytebuffer(54, 1);
    }

    public ByteBuffer execVenueInByteBuffer(ByteBuffer _bb) {
        return __vector_in_bytebuffer(_bb, 54, 1);
    }

    public String cpty() {
        int o = __offset(56);
        return o != 0 ? __string(o + bb_pos) : null;
    }

    public ByteBuffer cptyAsByteBuffer() {
        return __vector_as_bytebuffer(56, 1);
    }

    public ByteBuffer cptyInByteBuffer(ByteBuffer _bb) {
        return __vector_in_bytebuffer(_bb, 56, 1);
    }
}

