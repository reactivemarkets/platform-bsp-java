// automatically generated by the FlatBuffers compiler, do not modify

package com.reactivemarkets.encoding.fbs;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class RevalRates extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_12_0(); }
  public static RevalRates getRootAsRevalRates(ByteBuffer _bb) { return getRootAsRevalRates(_bb, new RevalRates()); }
  public static RevalRates getRootAsRevalRates(ByteBuffer _bb, RevalRates obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public RevalRates __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public short assetId(int j) { int o = __offset(6); return o != 0 ? bb.getShort(__vector(o) + j * 2) : 0; }
  public int assetIdLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public ShortVector assetIdVector() { return assetIdVector(new ShortVector()); }
  public ShortVector assetIdVector(ShortVector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer assetIdAsByteBuffer() { return __vector_as_bytebuffer(6, 2); }
  public ByteBuffer assetIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 2); }
  public double rate(int j) { int o = __offset(8); return o != 0 ? bb.getDouble(__vector(o) + j * 8) : 0; }
  public int rateLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public DoubleVector rateVector() { return rateVector(new DoubleVector()); }
  public DoubleVector rateVector(DoubleVector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer rateAsByteBuffer() { return __vector_as_bytebuffer(8, 8); }
  public ByteBuffer rateInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 8); }

  public static int createRevalRates(FlatBufferBuilder builder,
      int idOffset,
      int asset_idOffset,
      int rateOffset) {
    builder.startTable(3);
    RevalRates.addRate(builder, rateOffset);
    RevalRates.addAssetId(builder, asset_idOffset);
    RevalRates.addId(builder, idOffset);
    return RevalRates.endRevalRates(builder);
  }

  public static void startRevalRates(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addAssetId(FlatBufferBuilder builder, int assetIdOffset) { builder.addOffset(1, assetIdOffset, 0); }
  public static int createAssetIdVector(FlatBufferBuilder builder, short[] data) { builder.startVector(2, data.length, 2); for (int i = data.length - 1; i >= 0; i--) builder.addShort(data[i]); return builder.endVector(); }
  public static void startAssetIdVector(FlatBufferBuilder builder, int numElems) { builder.startVector(2, numElems, 2); }
  public static void addRate(FlatBufferBuilder builder, int rateOffset) { builder.addOffset(2, rateOffset, 0); }
  public static int createRateVector(FlatBufferBuilder builder, double[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addDouble(data[i]); return builder.endVector(); }
  public static void startRateVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static int endRevalRates(FlatBufferBuilder builder) {
    int o = builder.endTable();
    builder.required(o, 6);  // asset_id
    builder.required(o, 8);  // rate
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public RevalRates get(int j) { return get(new RevalRates(), j); }
    public RevalRates get(RevalRates obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

